[
    {
        "id": "4212b7702b0d5adb",
        "type": "tab",
        "label": "combined flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "735a45d93fa564be",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 72",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 160,
        "wires": [
            [
                "d01621ce35fe4042",
                "ab1eed13b7d13761"
            ]
        ]
    },
    {
        "id": "5cc58ee9db496578",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Flowratefun",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 1000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 100,
        "wires": [
            [
                "ae16e609c85a26da",
                "7896f23d1705587e"
            ]
        ]
    },
    {
        "id": "ae16e609c85a26da",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "FlowrateSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/FlowrateSensor/flowrate",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1910,
        "y": 100,
        "wires": [
            [
                "f5fa5326d3b00f08"
            ]
        ]
    },
    {
        "id": "f5fa5326d3b00f08",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 180",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 100,
        "wires": []
    },
    {
        "id": "95e91a33c3e8bb60",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 100,
        "wires": [
            [
                "5cc58ee9db496578"
            ]
        ]
    },
    {
        "id": "d01621ce35fe4042",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 181",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 200,
        "wires": []
    },
    {
        "id": "7896f23d1705587e",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 182",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 60,
        "wires": []
    },
    {
        "id": "ab1eed13b7d13761",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "flowrate-out",
        "measurement": "FlowrateSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2140,
        "y": 160,
        "wires": []
    },
    {
        "id": "344d6cc0669a7327",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "FlowrateSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/FlowrateSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1770,
        "y": 160,
        "wires": [
            [
                "735a45d93fa564be",
                "c8af3266d0fa6667"
            ]
        ]
    },
    {
        "id": "30dc06e9b0758b49",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 160,
        "wires": [
            [
                "344d6cc0669a7327"
            ]
        ]
    },
    {
        "id": "c8af3266d0fa6667",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 183",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 200,
        "wires": []
    },
    {
        "id": "27ff01b2c16485c2",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "flowrate",
        "query": "select * from FlowrateSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1730,
        "y": 240,
        "wires": [
            [
                "a554a73f04e39e9d"
            ]
        ]
    },
    {
        "id": "3075417cfd4238bc",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 240,
        "wires": [
            [
                "27ff01b2c16485c2"
            ]
        ]
    },
    {
        "id": "a554a73f04e39e9d",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 184",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 240,
        "wires": []
    },
    {
        "id": "597735226288aa75",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Vibration-Velocityfun",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-40, 100).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 340,
        "wires": [
            [
                "6a129ad863b320ac",
                "687f61c58df09fec"
            ]
        ]
    },
    {
        "id": "6a129ad863b320ac",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "VibrationSensor-v",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/VibrationSensor/vibration-v",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2000,
        "y": 340,
        "wires": [
            [
                "1d3e85134c0d1c11"
            ]
        ]
    },
    {
        "id": "1d3e85134c0d1c11",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 185",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 340,
        "wires": []
    },
    {
        "id": "072d882a110d16cc",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Vibration-Acceleartionfun",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 1000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 400,
        "wires": [
            [
                "37dcc03e38c0220e",
                "e87c09d58eece889"
            ]
        ]
    },
    {
        "id": "37dcc03e38c0220e",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "VibrationSensor-a",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/VibrationSensor/vibration-a",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2000,
        "y": 420,
        "wires": [
            [
                "353d7ab38c89f90e"
            ]
        ]
    },
    {
        "id": "353d7ab38c89f90e",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 186",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 420,
        "wires": []
    },
    {
        "id": "947ac803f451b987",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Vibration-Displacementfun",
        "func": "function getRandomFloat(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nmsg.payload = getRandomFloat(0, 1000)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 460,
        "wires": [
            [
                "50923c10c0deea56",
                "3e40f950bcee9908"
            ]
        ]
    },
    {
        "id": "50923c10c0deea56",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "VibrationSensor-d",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/VibrationSensor/vibration-d",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2000,
        "y": 500,
        "wires": [
            [
                "a363bb347c27f34b"
            ]
        ]
    },
    {
        "id": "a363bb347c27f34b",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 187",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 500,
        "wires": []
    },
    {
        "id": "e6d391b83f3f73bf",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 380,
        "wires": [
            [
                "597735226288aa75",
                "072d882a110d16cc",
                "947ac803f451b987"
            ]
        ]
    },
    {
        "id": "687f61c58df09fec",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 188",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 300,
        "wires": []
    },
    {
        "id": "e87c09d58eece889",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 189",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 380,
        "wires": []
    },
    {
        "id": "3e40f950bcee9908",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 190",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 460,
        "wires": []
    },
    {
        "id": "bad1b374bccc3f9b",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 73",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 560,
        "wires": [
            [
                "f116752f888a2f1d",
                "1f3f9f9f9da993a3"
            ]
        ]
    },
    {
        "id": "f116752f888a2f1d",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 191",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 600,
        "wires": []
    },
    {
        "id": "1f3f9f9f9da993a3",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "vibration-out",
        "measurement": "VibrationSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2140,
        "y": 560,
        "wires": []
    },
    {
        "id": "793163b734f7bd76",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "VibrationSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/VibrationSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1770,
        "y": 560,
        "wires": [
            [
                "bad1b374bccc3f9b",
                "0af61aa7e726977c"
            ]
        ]
    },
    {
        "id": "41d7592f5c97e106",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 560,
        "wires": [
            [
                "793163b734f7bd76"
            ]
        ]
    },
    {
        "id": "0af61aa7e726977c",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 192",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 600,
        "wires": []
    },
    {
        "id": "18bb50bc958505db",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Vibration Influx In",
        "query": "select * from VibrationSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1760,
        "y": 640,
        "wires": [
            [
                "0d95169838406d05"
            ]
        ]
    },
    {
        "id": "c5bdde6054867b82",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 640,
        "wires": [
            [
                "18bb50bc958505db"
            ]
        ]
    },
    {
        "id": "0d95169838406d05",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 193",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 640,
        "wires": []
    },
    {
        "id": "817b97b8f09e3469",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "SoilMoisturefun",
        "func": "function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nmsg.payload = getRandomInt(0, 1023)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 740,
        "wires": [
            [
                "1cae0869d8d41dd2",
                "97b3e29b934448a8"
            ]
        ]
    },
    {
        "id": "1cae0869d8d41dd2",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "SoilMoistureSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/SoilMoistureSensor/soilmoisture",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1960,
        "y": 740,
        "wires": [
            [
                "3d65ceb7ddf3c8fe"
            ]
        ]
    },
    {
        "id": "3d65ceb7ddf3c8fe",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 194",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 740,
        "wires": []
    },
    {
        "id": "97b3e29b934448a8",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 195",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 700,
        "wires": []
    },
    {
        "id": "10e2ce67112a9b7d",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 740,
        "wires": [
            [
                "817b97b8f09e3469"
            ]
        ]
    },
    {
        "id": "7c930afff9ecab1b",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 74",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 800,
        "wires": [
            [
                "a299a287f6701877",
                "094e0258287431d8"
            ]
        ]
    },
    {
        "id": "a299a287f6701877",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 196",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 840,
        "wires": []
    },
    {
        "id": "094e0258287431d8",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "SoilMoisture-out",
        "measurement": "SoilMoistureSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2150,
        "y": 800,
        "wires": []
    },
    {
        "id": "d6f478c809b4b2d9",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "SoilMoistureSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/SoilMoistureSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1780,
        "y": 800,
        "wires": [
            [
                "7c930afff9ecab1b",
                "ef57057f727db817"
            ]
        ]
    },
    {
        "id": "8169215d6720de83",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 800,
        "wires": [
            [
                "d6f478c809b4b2d9"
            ]
        ]
    },
    {
        "id": "ef57057f727db817",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 197",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 840,
        "wires": []
    },
    {
        "id": "31efc88c84333f18",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "SoilMoisture In",
        "query": "select * from SoilMoistureSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1750,
        "y": 880,
        "wires": [
            [
                "4dc726510947aa11"
            ]
        ]
    },
    {
        "id": "35d5ceabfc2f8abc",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 880,
        "wires": [
            [
                "31efc88c84333f18"
            ]
        ]
    },
    {
        "id": "4dc726510947aa11",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 198",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 880,
        "wires": []
    },
    {
        "id": "7348edbaff0b16b1",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "AirQualityfun",
        "func": "function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nmsg.payload = getRandomInt(0, 500)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 940,
        "wires": [
            [
                "38de3856880243a2"
            ]
        ]
    },
    {
        "id": "38de3856880243a2",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "AirQualitySensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/AirQualitySensor/airquality",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1960,
        "y": 940,
        "wires": [
            [
                "fee13963fdc57dcb"
            ]
        ]
    },
    {
        "id": "fee13963fdc57dcb",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 199",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 940,
        "wires": []
    },
    {
        "id": "b9ef96045c3f51f1",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 940,
        "wires": [
            [
                "7348edbaff0b16b1"
            ]
        ]
    },
    {
        "id": "1da129810a19cedf",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 75",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1000,
        "wires": [
            [
                "0a37ea4903d8fab1",
                "ee13c73bd78b6883"
            ]
        ]
    },
    {
        "id": "0a37ea4903d8fab1",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 200",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ee13c73bd78b6883",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "AirQuality-out",
        "measurement": "AirQualitySensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2130,
        "y": 1000,
        "wires": []
    },
    {
        "id": "78445786dc64aef1",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "AirQualitySensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/AirQualitySensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1760,
        "y": 1000,
        "wires": [
            [
                "1da129810a19cedf",
                "87e8c74435c84f2d"
            ]
        ]
    },
    {
        "id": "e21293807369f4f3",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 1000,
        "wires": [
            [
                "78445786dc64aef1"
            ]
        ]
    },
    {
        "id": "87e8c74435c84f2d",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 201",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 1040,
        "wires": []
    },
    {
        "id": "6ef764bcefe9458a",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "AirQuality In",
        "query": "select * from AirQualitySensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1720,
        "y": 1080,
        "wires": [
            [
                "d223f9e6e33c4fbb"
            ]
        ]
    },
    {
        "id": "2d11548d84cfeb96",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 1080,
        "wires": [
            [
                "6ef764bcefe9458a"
            ]
        ]
    },
    {
        "id": "d223f9e6e33c4fbb",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 202",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 1080,
        "wires": []
    },
    {
        "id": "2cdc401f8c1632c5",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "PHfun",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 14)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1160,
        "wires": [
            [
                "cff085bb0de86b23"
            ]
        ]
    },
    {
        "id": "cff085bb0de86b23",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "PHSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/PHSensor/ph",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1960,
        "y": 1160,
        "wires": [
            [
                "40697edbfa92ef12"
            ]
        ]
    },
    {
        "id": "40697edbfa92ef12",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 203",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 1160,
        "wires": []
    },
    {
        "id": "a2a5ea46df8c691d",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 1180,
        "wires": [
            [
                "2cdc401f8c1632c5"
            ]
        ]
    },
    {
        "id": "a5b0dfe40d93a2d9",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 76",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: \" \"  \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 1220,
        "wires": [
            [
                "80f5e2f68eb435ad",
                "9adc303f3b3f933f"
            ]
        ]
    },
    {
        "id": "80f5e2f68eb435ad",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 204",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 1260,
        "wires": []
    },
    {
        "id": "9adc303f3b3f933f",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "PH-out",
        "measurement": "PHSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2130,
        "y": 1220,
        "wires": []
    },
    {
        "id": "e1dea00b30ea64b9",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "PHSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/PHSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1750,
        "y": 1220,
        "wires": [
            [
                "a5b0dfe40d93a2d9",
                "b4678ea37bd0a54d"
            ]
        ]
    },
    {
        "id": "fd5bf54b3594ccd6",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 1220,
        "wires": [
            [
                "e1dea00b30ea64b9"
            ]
        ]
    },
    {
        "id": "b4678ea37bd0a54d",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 205",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 1260,
        "wires": []
    },
    {
        "id": "5f97d5094d0ef7b8",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "PH In",
        "query": "select * from PHSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1760,
        "y": 1280,
        "wires": [
            [
                "59f8040a93281458"
            ]
        ]
    },
    {
        "id": "5e67b50e0645dc73",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 1300,
        "wires": [
            [
                "5f97d5094d0ef7b8"
            ]
        ]
    },
    {
        "id": "59f8040a93281458",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 206",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 1300,
        "wires": []
    },
    {
        "id": "a8d3b9053d4c6ec2",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Carbondioxidefun",
        "func": "/*function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 1100).toFixed(1)\n*/\nmsg.payload = 189.0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1360,
        "wires": [
            [
                "cfe36c5d2a666867"
            ]
        ]
    },
    {
        "id": "cfe36c5d2a666867",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "CarbondioxideSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/CarbondioxideSensor/carbondioxide",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2010,
        "y": 1360,
        "wires": [
            [
                "0ddc7d3e430eed95"
            ]
        ]
    },
    {
        "id": "0ddc7d3e430eed95",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 207",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1360,
        "wires": []
    },
    {
        "id": "522fe3cf760b7c2b",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 1360,
        "wires": [
            [
                "a8d3b9053d4c6ec2"
            ]
        ]
    },
    {
        "id": "7ab1466f56447862",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 77",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 1400,
        "wires": [
            [
                "b3202e9ef4c77e2b",
                "42497c6ebc676e7d"
            ]
        ]
    },
    {
        "id": "b3202e9ef4c77e2b",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 208",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 1440,
        "wires": []
    },
    {
        "id": "42497c6ebc676e7d",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Carbondioxide-out",
        "measurement": "CarbondioxideSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2180,
        "y": 1400,
        "wires": []
    },
    {
        "id": "08313b93f2a894f0",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "CarbondioxideSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/CarbondioxideSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1810,
        "y": 1400,
        "wires": [
            [
                "7ab1466f56447862",
                "85efe538f40a692b"
            ]
        ]
    },
    {
        "id": "2d5cb6d974d7ea34",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 1400,
        "wires": [
            [
                "08313b93f2a894f0"
            ]
        ]
    },
    {
        "id": "85efe538f40a692b",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 209",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 1440,
        "wires": []
    },
    {
        "id": "4e5a2bb971f787c6",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Carbondioxide In",
        "query": "select * from CarbondioxideSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1780,
        "y": 1480,
        "wires": [
            [
                "8cc584e128d38f12"
            ]
        ]
    },
    {
        "id": "0512035c10c4ad39",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 1480,
        "wires": [
            [
                "4e5a2bb971f787c6"
            ]
        ]
    },
    {
        "id": "8cc584e128d38f12",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 210",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1480,
        "wires": []
    },
    {
        "id": "be3fc806122895e4",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Conductivityfun-w",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 20).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1540,
        "wires": [
            [
                "e8187e23101e8dcb"
            ]
        ]
    },
    {
        "id": "e8187e23101e8dcb",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ConductivitySensor-w",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/ConductivitySensor/conductivity-w",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2010,
        "y": 1540,
        "wires": [
            [
                "7a2d52469b41099a"
            ]
        ]
    },
    {
        "id": "7a2d52469b41099a",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 211",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1540,
        "wires": []
    },
    {
        "id": "4a12d18f123d0864",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Conductivityfun-t",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-15, 100).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1580,
        "wires": [
            [
                "08cfc6e95fe3118c"
            ]
        ]
    },
    {
        "id": "08cfc6e95fe3118c",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ConductivitySensor-t",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/ConductivitySensor/conductivity-t",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2010,
        "y": 1580,
        "wires": [
            [
                "5dbb6787392a47de"
            ]
        ]
    },
    {
        "id": "5dbb6787392a47de",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 212",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1580,
        "wires": []
    },
    {
        "id": "da255f91058394e3",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 1560,
        "wires": [
            [
                "be3fc806122895e4",
                "4a12d18f123d0864"
            ]
        ]
    },
    {
        "id": "a35273839cc0aa42",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 78",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 1640,
        "wires": [
            [
                "dd1dca0b15a2cbd0",
                "2823644a835dfd45"
            ]
        ]
    },
    {
        "id": "dd1dca0b15a2cbd0",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 213",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2160,
        "y": 1680,
        "wires": []
    },
    {
        "id": "2823644a835dfd45",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Conductivity-out",
        "measurement": "ConductivitySensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2160,
        "y": 1640,
        "wires": []
    },
    {
        "id": "e44bb0ef8e22b4e2",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ConductivitySensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/ConductivitySensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1790,
        "y": 1640,
        "wires": [
            [
                "a35273839cc0aa42",
                "32c0d98e6fc80a11"
            ]
        ]
    },
    {
        "id": "4ddbee1d149b0880",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1600,
        "y": 1640,
        "wires": [
            [
                "e44bb0ef8e22b4e2"
            ]
        ]
    },
    {
        "id": "32c0d98e6fc80a11",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 214",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1980,
        "y": 1680,
        "wires": []
    },
    {
        "id": "4bb308181beccbcf",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Conductivity In",
        "query": "select * from ConductivitySensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1790,
        "y": 1720,
        "wires": [
            [
                "332cc8dc0ac0d3a4"
            ]
        ]
    },
    {
        "id": "e9f84d8521849b1b",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1600,
        "y": 1720,
        "wires": [
            [
                "4bb308181beccbcf"
            ]
        ]
    },
    {
        "id": "332cc8dc0ac0d3a4",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 215",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 1720,
        "wires": []
    },
    {
        "id": "a6281e98a189f7ad",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Currentfun",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 40).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1780,
        "wires": [
            [
                "114bbbfdb8ca6d2b"
            ]
        ]
    },
    {
        "id": "114bbbfdb8ca6d2b",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "CurrentSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/CurrentSensor/current",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1990,
        "y": 1780,
        "wires": [
            [
                "79f8e811d169310c"
            ]
        ]
    },
    {
        "id": "79f8e811d169310c",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 216",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1780,
        "wires": []
    },
    {
        "id": "b9446902fb219d57",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 1780,
        "wires": [
            [
                "a6281e98a189f7ad"
            ]
        ]
    },
    {
        "id": "53728d1e779505ab",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 79",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 1820,
        "wires": [
            [
                "53721e7677dd2b7c",
                "56f5dfbd476a5a5e"
            ]
        ]
    },
    {
        "id": "53721e7677dd2b7c",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 217",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2180,
        "y": 1860,
        "wires": []
    },
    {
        "id": "56f5dfbd476a5a5e",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Current-out",
        "measurement": "CurrentSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2170,
        "y": 1820,
        "wires": []
    },
    {
        "id": "99ef7cba38365264",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "CurrentSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/CurrentSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1800,
        "y": 1820,
        "wires": [
            [
                "53728d1e779505ab",
                "4152252bc83bf3b2"
            ]
        ]
    },
    {
        "id": "8d76899ec8dd842d",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1620,
        "y": 1820,
        "wires": [
            [
                "99ef7cba38365264"
            ]
        ]
    },
    {
        "id": "4152252bc83bf3b2",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 218",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 1860,
        "wires": []
    },
    {
        "id": "5305bba5c0e96a78",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Current In",
        "query": "select * from CurrentSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1790,
        "y": 1900,
        "wires": [
            [
                "406851b490b2e80c"
            ]
        ]
    },
    {
        "id": "424ea7ae71f58411",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1620,
        "y": 1900,
        "wires": [
            [
                "5305bba5c0e96a78"
            ]
        ]
    },
    {
        "id": "406851b490b2e80c",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 219",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 1900,
        "wires": []
    },
    {
        "id": "ba0b0db436344fe9",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Voltagefun",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 500).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1980,
        "wires": [
            [
                "6666e40804de9955"
            ]
        ]
    },
    {
        "id": "6666e40804de9955",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "VoltageSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/VoltageSensor/voltage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2010,
        "y": 1980,
        "wires": [
            [
                "c15e2ac7cb26bdd5"
            ]
        ]
    },
    {
        "id": "c15e2ac7cb26bdd5",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 220",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 1980,
        "wires": []
    },
    {
        "id": "f50677dc5d07525a",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 1980,
        "wires": [
            [
                "ba0b0db436344fe9"
            ]
        ]
    },
    {
        "id": "750d702ebed27223",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 80",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 2040,
        "wires": [
            [
                "46b17ba7e95dbf80",
                "57aa95d8a8631f2c"
            ]
        ]
    },
    {
        "id": "46b17ba7e95dbf80",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 221",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2180,
        "y": 2080,
        "wires": []
    },
    {
        "id": "57aa95d8a8631f2c",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Voltage-out",
        "measurement": "VoltageSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2170,
        "y": 2040,
        "wires": []
    },
    {
        "id": "31b4237a88a51089",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "VoltageSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/VoltageSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1800,
        "y": 2040,
        "wires": [
            [
                "750d702ebed27223",
                "11bb104ab30a6ed5"
            ]
        ]
    },
    {
        "id": "738e513b8074dda0",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1620,
        "y": 2040,
        "wires": [
            [
                "31b4237a88a51089"
            ]
        ]
    },
    {
        "id": "11bb104ab30a6ed5",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 222",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 2080,
        "wires": []
    },
    {
        "id": "f185e20e08b29263",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Voltage In",
        "query": "select * from VoltageSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1790,
        "y": 2120,
        "wires": [
            [
                "d7483ee340ae265d"
            ]
        ]
    },
    {
        "id": "d93ca7eeb40a2cc8",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1620,
        "y": 2120,
        "wires": [
            [
                "f185e20e08b29263"
            ]
        ]
    },
    {
        "id": "d7483ee340ae265d",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 223",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 2120,
        "wires": []
    },
    {
        "id": "d859045ad1c80e08",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Powerfun",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 40).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 2180,
        "wires": [
            [
                "b4e7d45aabf1b8dc"
            ]
        ]
    },
    {
        "id": "b4e7d45aabf1b8dc",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "PowerSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/PowerSensor/power",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2010,
        "y": 2180,
        "wires": [
            [
                "26110c76d9f119fe"
            ]
        ]
    },
    {
        "id": "26110c76d9f119fe",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 224",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2180,
        "wires": []
    },
    {
        "id": "0566325006228c8c",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 2180,
        "wires": [
            [
                "d859045ad1c80e08"
            ]
        ]
    },
    {
        "id": "0339616243c9fe56",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 81",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 2240,
        "wires": [
            [
                "6bbfe13a60f115b2",
                "b84b0a695f0a22d7"
            ]
        ]
    },
    {
        "id": "6bbfe13a60f115b2",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 225",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2180,
        "y": 2280,
        "wires": []
    },
    {
        "id": "b84b0a695f0a22d7",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Power-out",
        "measurement": "PowerSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2170,
        "y": 2240,
        "wires": []
    },
    {
        "id": "3714d872f22288c8",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "PowerSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/PowerSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1790,
        "y": 2240,
        "wires": [
            [
                "0339616243c9fe56",
                "53bec500d57cdbe6"
            ]
        ]
    },
    {
        "id": "8f236126b240aa2b",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 2260,
        "wires": [
            [
                "3714d872f22288c8"
            ]
        ]
    },
    {
        "id": "53bec500d57cdbe6",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 226",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 2280,
        "wires": []
    },
    {
        "id": "21ef8cc8ee59bf23",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Power In",
        "query": "select * from PowerSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1790,
        "y": 2320,
        "wires": [
            [
                "d9123123f4866d39"
            ]
        ]
    },
    {
        "id": "19ec0a897b88bec2",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1620,
        "y": 2320,
        "wires": [
            [
                "21ef8cc8ee59bf23"
            ]
        ]
    },
    {
        "id": "d9123123f4866d39",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 227",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 2320,
        "wires": []
    },
    {
        "id": "358b478718224b89",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Radiationfun-g",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 10000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2380,
        "wires": [
            [
                "7ec99441d116a45a"
            ]
        ]
    },
    {
        "id": "7ec99441d116a45a",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "RadiationSensor-g",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/RadiationSensor/radiation-g",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2020,
        "y": 2380,
        "wires": [
            [
                "0294feb2e8b47298"
            ]
        ]
    },
    {
        "id": "0294feb2e8b47298",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 228",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2380,
        "wires": []
    },
    {
        "id": "7b4b2c76b21e27be",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Radiationfun-ls",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 10000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2420,
        "wires": [
            [
                "cf4c926fa5cfbb90"
            ]
        ]
    },
    {
        "id": "cf4c926fa5cfbb90",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "RadiationSensor-ls",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/RadiationSensor/radiation-ls",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2020,
        "y": 2420,
        "wires": [
            [
                "2ee310963f3912f4"
            ]
        ]
    },
    {
        "id": "2ee310963f3912f4",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 229",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2420,
        "wires": []
    },
    {
        "id": "4dc9784eefd5f1e2",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Radiationfun-n",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 1000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2460,
        "wires": [
            [
                "9b765ea31aac0508"
            ]
        ]
    },
    {
        "id": "9b765ea31aac0508",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "RadiationSensor-n",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/RadiationSensor/radiation-n",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2020,
        "y": 2460,
        "wires": [
            [
                "6794697bd55b3568"
            ]
        ]
    },
    {
        "id": "6794697bd55b3568",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 230",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2460,
        "wires": []
    },
    {
        "id": "8350926126b59342",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Radiationfun-i",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 5000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2500,
        "wires": [
            [
                "79358b54fb66dc1b"
            ]
        ]
    },
    {
        "id": "79358b54fb66dc1b",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "RadiationSensor-i",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/RadiationSensor/radiation-i",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2020,
        "y": 2500,
        "wires": [
            [
                "e0fffdc950574af3"
            ]
        ]
    },
    {
        "id": "e0fffdc950574af3",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 231",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2500,
        "wires": []
    },
    {
        "id": "dcc605b8e3330af5",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 2440,
        "wires": [
            [
                "358b478718224b89",
                "7b4b2c76b21e27be",
                "4dc9784eefd5f1e2",
                "8350926126b59342"
            ]
        ]
    },
    {
        "id": "86a00a23b396e05a",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 82",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 2560,
        "wires": [
            [
                "924621f27d0e9457",
                "7d07cd675b9223e5"
            ]
        ]
    },
    {
        "id": "924621f27d0e9457",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 232",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2180,
        "y": 2600,
        "wires": []
    },
    {
        "id": "7d07cd675b9223e5",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Radiation-out",
        "measurement": "RadiationSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2170,
        "y": 2560,
        "wires": []
    },
    {
        "id": "116b867b6737a5c3",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "RadiationSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/RadiationSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1800,
        "y": 2560,
        "wires": [
            [
                "86a00a23b396e05a",
                "156bce427cb90669"
            ]
        ]
    },
    {
        "id": "871e2ae639b28c10",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1620,
        "y": 2560,
        "wires": [
            [
                "116b867b6737a5c3"
            ]
        ]
    },
    {
        "id": "156bce427cb90669",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 233",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 2600,
        "wires": []
    },
    {
        "id": "dd77203b925b4075",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Radiation In",
        "query": "select * from RadiationSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1800,
        "y": 2640,
        "wires": [
            [
                "1b9d587318bb1bb9"
            ]
        ]
    },
    {
        "id": "1a7744aed9707cb9",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1620,
        "y": 2640,
        "wires": [
            [
                "dd77203b925b4075"
            ]
        ]
    },
    {
        "id": "1b9d587318bb1bb9",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 234",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 2640,
        "wires": []
    },
    {
        "id": "6b027486e55d4993",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Chemicalfun-ph",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 14).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2700,
        "wires": [
            [
                "e2312f552aefcb65"
            ]
        ]
    },
    {
        "id": "e2312f552aefcb65",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ChemicalSensor-ph",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/ChemicalSensor/chemical-ph",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2020,
        "y": 2700,
        "wires": [
            [
                "b316aaa6e2d04022"
            ]
        ]
    },
    {
        "id": "b316aaa6e2d04022",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 235",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2700,
        "wires": []
    },
    {
        "id": "518dbe36e012ec8d",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Chemicalfun-g",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 500).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2740,
        "wires": [
            [
                "4d350efc39dc2e09"
            ]
        ]
    },
    {
        "id": "4d350efc39dc2e09",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ChemicalSensor-g",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/ChemicalSensor/chemical-g",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2020,
        "y": 2740,
        "wires": [
            [
                "79618c977ddfad66"
            ]
        ]
    },
    {
        "id": "79618c977ddfad66",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 236",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2740,
        "wires": []
    },
    {
        "id": "962e9207796d4a82",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Chemicalfun-e",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 130).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2780,
        "wires": [
            [
                "256fc8854807fa74"
            ]
        ]
    },
    {
        "id": "256fc8854807fa74",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ChemicalSensor-e",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/ChemicalSensor/chemical-e",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2020,
        "y": 2780,
        "wires": [
            [
                "dca7e3374dbdfd89"
            ]
        ]
    },
    {
        "id": "dca7e3374dbdfd89",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 237",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2780,
        "wires": []
    },
    {
        "id": "56741f48aae77038",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Chemicalfun-i",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 150).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2820,
        "wires": [
            [
                "60d99ec2a0d61745"
            ]
        ]
    },
    {
        "id": "60d99ec2a0d61745",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ChemicalSensor-i",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/ChemicalSensor/chemical-i",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2020,
        "y": 2820,
        "wires": [
            [
                "3360697aee2e2076"
            ]
        ]
    },
    {
        "id": "3360697aee2e2076",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 238",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2820,
        "wires": []
    },
    {
        "id": "0efa2a01aca3b165",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 2760,
        "wires": [
            [
                "6b027486e55d4993",
                "518dbe36e012ec8d",
                "962e9207796d4a82",
                "56741f48aae77038"
            ]
        ]
    },
    {
        "id": "79a126545c664191",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 83",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2880,
        "wires": [
            [
                "ee5cca1e8435e06c",
                "65a31c7bdb4110f1"
            ]
        ]
    },
    {
        "id": "ee5cca1e8435e06c",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 239",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 2920,
        "wires": []
    },
    {
        "id": "65a31c7bdb4110f1",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Chemical-out",
        "measurement": "ChemicalSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2190,
        "y": 2880,
        "wires": []
    },
    {
        "id": "da434dd5184761dd",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ChemicalSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/ChemicalSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 2880,
        "wires": [
            [
                "79a126545c664191",
                "b539bfcf615a2de1"
            ]
        ]
    },
    {
        "id": "0481b9ff234396b3",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 2880,
        "wires": [
            [
                "da434dd5184761dd"
            ]
        ]
    },
    {
        "id": "b539bfcf615a2de1",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 240",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 2920,
        "wires": []
    },
    {
        "id": "69ecba0552379ad3",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Chemical-In",
        "query": "select * from ChemicalSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1820,
        "y": 2960,
        "wires": [
            [
                "34610404f64d0f35"
            ]
        ]
    },
    {
        "id": "ebc715b0979345c3",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 2960,
        "wires": [
            [
                "69ecba0552379ad3"
            ]
        ]
    },
    {
        "id": "34610404f64d0f35",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 241",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 2960,
        "wires": []
    },
    {
        "id": "697c904ecef2ac87",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Occupancy-pifun",
        "func": "function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nmsg.payload = getRandomInt(0, 1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 3020,
        "wires": [
            [
                "b1591af3461ebeff"
            ]
        ]
    },
    {
        "id": "b1591af3461ebeff",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "OccupancySensor-pi",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/OccupancySensor/occupancy-pi",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2030,
        "y": 3020,
        "wires": [
            [
                "adbdc54723ceda52"
            ]
        ]
    },
    {
        "id": "adbdc54723ceda52",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 242",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 3020,
        "wires": []
    },
    {
        "id": "b9ad72f0a60ba92f",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Occupancy-ufun",
        "func": "function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nmsg.payload = getRandomInt(0, 1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 3060,
        "wires": [
            [
                "5ed89257cc5cfe67"
            ]
        ]
    },
    {
        "id": "5ed89257cc5cfe67",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "OccupancySensor-u",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/OccupancySensor/occupancy-u",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2030,
        "y": 3060,
        "wires": [
            [
                "2c0d5be94169417d"
            ]
        ]
    },
    {
        "id": "2c0d5be94169417d",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 243",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 3060,
        "wires": []
    },
    {
        "id": "f0a4d2ba1d7255fe",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Occupancy-vfun",
        "func": "function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nmsg.payload = getRandomInt(0, 1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 3100,
        "wires": [
            [
                "fcdede654a9dc9d6"
            ]
        ]
    },
    {
        "id": "fcdede654a9dc9d6",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "OccupancySensor-v",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/OccupancySensor/occupancy-v",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2030,
        "y": 3100,
        "wires": [
            [
                "0be4fc34627998d3"
            ]
        ]
    },
    {
        "id": "0be4fc34627998d3",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 244",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 3100,
        "wires": []
    },
    {
        "id": "60ba07809149c7b7",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1590,
        "y": 3040,
        "wires": [
            [
                "697c904ecef2ac87",
                "b9ad72f0a60ba92f",
                "f0a4d2ba1d7255fe"
            ]
        ]
    },
    {
        "id": "c004715db288e7ef",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 84",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit:\" \"   \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 3160,
        "wires": [
            [
                "4c73280423241da9",
                "37acf89f174ca80f"
            ]
        ]
    },
    {
        "id": "4c73280423241da9",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 245",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 3200,
        "wires": []
    },
    {
        "id": "37acf89f174ca80f",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Occupancy-out",
        "measurement": "OccupancySensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2180,
        "y": 3160,
        "wires": []
    },
    {
        "id": "0a83f371311e23a6",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "OccupancySensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/OccupancySensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1840,
        "y": 3160,
        "wires": [
            [
                "c004715db288e7ef",
                "02406b987137a361"
            ]
        ]
    },
    {
        "id": "2425c118a072b4dc",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 3160,
        "wires": [
            [
                "0a83f371311e23a6"
            ]
        ]
    },
    {
        "id": "02406b987137a361",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 246",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 3200,
        "wires": []
    },
    {
        "id": "4cbdea2424cec590",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Occupancy-In",
        "query": "select * from OccupancySensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1810,
        "y": 3240,
        "wires": [
            [
                "25b8482329d6ea9c"
            ]
        ]
    },
    {
        "id": "122cd7609d3824ff",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 3240,
        "wires": [
            [
                "4cbdea2424cec590"
            ]
        ]
    },
    {
        "id": "25b8482329d6ea9c",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 3240,
        "wires": []
    },
    {
        "id": "37a75f41003919a7",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Heartbeatfun",
        "func": "function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nmsg.payload = getRandomInt(40, 200)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 3300,
        "wires": [
            [
                "03d02313c633f056",
                "ec858edc2c17469a"
            ]
        ]
    },
    {
        "id": "03d02313c633f056",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "HeartbeatSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/HeartbeatSensor/heartbeat",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2000,
        "y": 3300,
        "wires": [
            [
                "56ec632488532a1e"
            ]
        ]
    },
    {
        "id": "56ec632488532a1e",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 248",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 3300,
        "wires": []
    },
    {
        "id": "98aea33918a958b6",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 3300,
        "wires": [
            [
                "37a75f41003919a7"
            ]
        ]
    },
    {
        "id": "9a6de631f647bf44",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 85",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3360,
        "wires": [
            [
                "b267422e1882f07d",
                "e52b851d75358939"
            ]
        ]
    },
    {
        "id": "b267422e1882f07d",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 249",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 3400,
        "wires": []
    },
    {
        "id": "e52b851d75358939",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Heartbeat-out",
        "measurement": "HeartbeatSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2200,
        "y": 3360,
        "wires": []
    },
    {
        "id": "0f4d4ebd30f41f4c",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "HeartbeatSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/HeartbeatSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 3360,
        "wires": [
            [
                "9a6de631f647bf44",
                "7e477d410f65d28c"
            ]
        ]
    },
    {
        "id": "0146aee2507bead6",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 3360,
        "wires": [
            [
                "0f4d4ebd30f41f4c"
            ]
        ]
    },
    {
        "id": "7e477d410f65d28c",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 250",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 3400,
        "wires": []
    },
    {
        "id": "81cd59c0cfeed53c",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Heartbeat-In",
        "query": "select * from HeartbeatSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1820,
        "y": 3440,
        "wires": [
            [
                "e4bf381553f767ae"
            ]
        ]
    },
    {
        "id": "c271c12fa935116e",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 3440,
        "wires": [
            [
                "81cd59c0cfeed53c"
            ]
        ]
    },
    {
        "id": "e4bf381553f767ae",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 251",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 3440,
        "wires": []
    },
    {
        "id": "ec858edc2c17469a",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 252",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1980,
        "y": 3280,
        "wires": []
    },
    {
        "id": "afcfa57f365edbc5",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "Bloodpressurefun",
        "func": "function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nmsg.payload = getRandomInt(0, 300)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 3520,
        "wires": [
            [
                "8cdccc7655545952"
            ]
        ]
    },
    {
        "id": "8cdccc7655545952",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "BloodPressureSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/BloodpressureSensor/bp",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2030,
        "y": 3520,
        "wires": [
            [
                "0e4a1241886b2cff"
            ]
        ]
    },
    {
        "id": "0e4a1241886b2cff",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 253",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 3520,
        "wires": []
    },
    {
        "id": "46e98fdf17ed8472",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 3520,
        "wires": [
            [
                "afcfa57f365edbc5"
            ]
        ]
    },
    {
        "id": "4666db731c1b42b0",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 86",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000); \n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units    \n    };\n    var measurementjson2 = {\n        gateway : v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location : \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n    \n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3580,
        "wires": [
            [
                "fb20281486b033e8",
                "0ddf5296dadddb3b"
            ]
        ]
    },
    {
        "id": "fb20281486b033e8",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 254",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 3620,
        "wires": []
    },
    {
        "id": "0ddf5296dadddb3b",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Bloodpressure-out",
        "measurement": "BloodpressureSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 2210,
        "y": 3580,
        "wires": []
    },
    {
        "id": "cafacd552ee04aeb",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "BloodPressureSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/BloodpressureSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1830,
        "y": 3580,
        "wires": [
            [
                "4666db731c1b42b0",
                "04ca4247f9210ca7"
            ]
        ]
    },
    {
        "id": "fd49a50ef7847f0b",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 3580,
        "wires": [
            [
                "cafacd552ee04aeb"
            ]
        ]
    },
    {
        "id": "04ca4247f9210ca7",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 255",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 3620,
        "wires": []
    },
    {
        "id": "de77e0ddf5fe58d9",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Bloodpressure-In",
        "query": "select * from BloodpressureSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1840,
        "y": 3660,
        "wires": [
            [
                "2cbb4cd829ea0541"
            ]
        ]
    },
    {
        "id": "1688262191efc1c5",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 3660,
        "wires": [
            [
                "de77e0ddf5fe58d9"
            ]
        ]
    },
    {
        "id": "2cbb4cd829ea0541",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 256",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 3660,
        "wires": []
    },
    {
        "id": "4360a9283b75eb23",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1290,
        "y": 320,
        "wires": [
            [
                "6b027486e55d4993",
                "518dbe36e012ec8d",
                "962e9207796d4a82",
                "56741f48aae77038",
                "da434dd5184761dd",
                "69ecba0552379ad3",
                "697c904ecef2ac87",
                "b9ad72f0a60ba92f",
                "f0a4d2ba1d7255fe",
                "0a83f371311e23a6",
                "4cbdea2424cec590",
                "37a75f41003919a7",
                "0f4d4ebd30f41f4c",
                "81cd59c0cfeed53c",
                "afcfa57f365edbc5",
                "cafacd552ee04aeb",
                "de77e0ddf5fe58d9",
                "dd77203b925b4075",
                "116b867b6737a5c3",
                "358b478718224b89",
                "7b4b2c76b21e27be",
                "4dc9784eefd5f1e2",
                "8350926126b59342",
                "21ef8cc8ee59bf23",
                "3714d872f22288c8",
                "d859045ad1c80e08",
                "f185e20e08b29263",
                "31b4237a88a51089",
                "ba0b0db436344fe9",
                "5305bba5c0e96a78",
                "4bb308181beccbcf",
                "a6281e98a189f7ad",
                "99ef7cba38365264",
                "e44bb0ef8e22b4e2",
                "be3fc806122895e4",
                "4a12d18f123d0864",
                "4e5a2bb971f787c6",
                "08313b93f2a894f0",
                "a8d3b9053d4c6ec2",
                "5f97d5094d0ef7b8",
                "e1dea00b30ea64b9",
                "2cdc401f8c1632c5",
                "6ef764bcefe9458a",
                "78445786dc64aef1",
                "7348edbaff0b16b1",
                "31efc88c84333f18",
                "d6f478c809b4b2d9",
                "817b97b8f09e3469",
                "18bb50bc958505db",
                "793163b734f7bd76",
                "947ac803f451b987",
                "072d882a110d16cc",
                "597735226288aa75",
                "27ff01b2c16485c2",
                "344d6cc0669a7327",
                "5cc58ee9db496578"
            ]
        ]
    },
    {
        "id": "905c29391f03354e",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 87",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-40, 100).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 40,
        "wires": [
            [
                "aac412dd8e577bd5"
            ]
        ]
    },
    {
        "id": "aac412dd8e577bd5",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "TemperatureSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/TemperatureSensor/temperature",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "1548defbed030a88"
            ]
        ]
    },
    {
        "id": "1548defbed030a88",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 257",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 40,
        "wires": []
    },
    {
        "id": "0bd77597530fedfd",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 88",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 100,
        "wires": [
            [
                "5e8bbf579cd2b58f"
            ]
        ]
    },
    {
        "id": "5e8bbf579cd2b58f",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "TemperatureSensor-out",
        "measurement": "TemperatureSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 970,
        "y": 100,
        "wires": []
    },
    {
        "id": "e59f43a6b06859e5",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "TemperatureSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/TemperatureSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 100,
        "wires": [
            [
                "0bd77597530fedfd",
                "c3b4057325fb2ab1"
            ]
        ]
    },
    {
        "id": "c3b4057325fb2ab1",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 258",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 140,
        "wires": []
    },
    {
        "id": "b00cd33127d26128",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Temp-In",
        "query": "select * from TemperatureSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 520,
        "y": 160,
        "wires": [
            [
                "471f8843b66c1bd3"
            ]
        ]
    },
    {
        "id": "471f8843b66c1bd3",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 259",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 180,
        "wires": []
    },
    {
        "id": "5326fddd5c267e77",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 60,
        "wires": [
            [
                "905c29391f03354e"
            ]
        ]
    },
    {
        "id": "46b3233e3e9bbf4f",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "HumidSensor1",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/HumidSensor/humidity",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 260,
        "wires": [
            [
                "cfc77af746dd82ec"
            ]
        ]
    },
    {
        "id": "cfc77af746dd82ec",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 260",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "43304a7a1f4aa9f5",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 89",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 100).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "46b3233e3e9bbf4f"
            ]
        ]
    },
    {
        "id": "ec536c936b574fe5",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 90",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "306b98901dc9120b"
            ]
        ]
    },
    {
        "id": "306b98901dc9120b",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Humid-out",
        "measurement": "HumidSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 930,
        "y": 300,
        "wires": []
    },
    {
        "id": "d4ad23af1512fb12",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "HumidSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/HumidSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 300,
        "wires": [
            [
                "ec536c936b574fe5",
                "cc6afa69360b1b20"
            ]
        ]
    },
    {
        "id": "cc6afa69360b1b20",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 261",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "3253d8df2d570bf2",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Humid-In",
        "query": "select * from HumidSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 520,
        "y": 380,
        "wires": [
            [
                "1961d08651e4fc03"
            ]
        ]
    },
    {
        "id": "1961d08651e4fc03",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 262",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 380,
        "wires": []
    },
    {
        "id": "a55ada2567e939fe",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 260,
        "wires": [
            [
                "43304a7a1f4aa9f5"
            ]
        ]
    },
    {
        "id": "e1112df7db04acba",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "LightSensor1",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/LightSensor/light",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 460,
        "wires": [
            [
                "bb1cc072e1e12e03"
            ]
        ]
    },
    {
        "id": "bb1cc072e1e12e03",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 263",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 460,
        "wires": []
    },
    {
        "id": "1fd6b669ae95fbfd",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 91",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0,100000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 460,
        "wires": [
            [
                "e1112df7db04acba"
            ]
        ]
    },
    {
        "id": "e5d16e0a90056d56",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 92",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 520,
        "wires": [
            [
                "a3eb54fa7b1a8f18"
            ]
        ]
    },
    {
        "id": "a3eb54fa7b1a8f18",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Light-out",
        "measurement": "LightSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "7413e3e73d96044d",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "LightSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/LightSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "e5d16e0a90056d56",
                "3f5445e8c6373871"
            ]
        ]
    },
    {
        "id": "3f5445e8c6373871",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 264",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 560,
        "wires": []
    },
    {
        "id": "7859c05f93635f43",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Light-In",
        "query": "select * from LightSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 520,
        "y": 600,
        "wires": [
            [
                "a58a6fdc25f43364"
            ]
        ]
    },
    {
        "id": "a58a6fdc25f43364",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 265",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 600,
        "wires": []
    },
    {
        "id": "cb6e6343f89d1fdb",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 480,
        "wires": [
            [
                "1fd6b669ae95fbfd"
            ]
        ]
    },
    {
        "id": "c1ce66bc49d25b87",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "MotionSensor1",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/MotionSensor/motion",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 700,
        "y": 660,
        "wires": [
            [
                "7ab88c18b0c596fc"
            ]
        ]
    },
    {
        "id": "7ab88c18b0c596fc",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 266",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 660,
        "wires": []
    },
    {
        "id": "f04a8f2e15a960a2",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 93",
        "func": "msg.payload = Math.random() > 0.5;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 660,
        "wires": [
            [
                "c1ce66bc49d25b87"
            ]
        ]
    },
    {
        "id": "e7aa7a9a1b33b221",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 660,
        "wires": [
            [
                "f04a8f2e15a960a2"
            ]
        ]
    },
    {
        "id": "31c436ff163ce6b6",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 94",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 720,
        "wires": [
            [
                "27938c80d42bfbe8"
            ]
        ]
    },
    {
        "id": "27938c80d42bfbe8",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Motion-out",
        "measurement": "MotionSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 950,
        "y": 720,
        "wires": []
    },
    {
        "id": "074b7483065052ce",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "MotionSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/MotionSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 720,
        "wires": [
            [
                "31c436ff163ce6b6",
                "4f5d0e130f9242e4"
            ]
        ]
    },
    {
        "id": "4f5d0e130f9242e4",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 267",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 760,
        "wires": []
    },
    {
        "id": "947192f47ce53fd0",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Motion-In",
        "query": "select * from MotionSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 800,
        "wires": [
            [
                "d892168951912f86"
            ]
        ]
    },
    {
        "id": "d892168951912f86",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 268",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 800,
        "wires": []
    },
    {
        "id": "5b9f01024263c2b7",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ProxSensor1",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/ProximitySensor/distance",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 860,
        "wires": [
            [
                "c6d1bcaef8215a3f"
            ]
        ]
    },
    {
        "id": "c6d1bcaef8215a3f",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 269",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 860,
        "wires": []
    },
    {
        "id": "682699ebbd8b163d",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 95",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 1000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 860,
        "wires": [
            [
                "5b9f01024263c2b7"
            ]
        ]
    },
    {
        "id": "4cfad4ddf1645d5d",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 96",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 920,
        "wires": [
            [
                "81b1e55e69849a12"
            ]
        ]
    },
    {
        "id": "81b1e55e69849a12",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Proximity-out",
        "measurement": "PromixitySensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 930,
        "y": 920,
        "wires": []
    },
    {
        "id": "e57e97a7155eb716",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "ProximitySensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/ProximitySensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 920,
        "wires": [
            [
                "4cfad4ddf1645d5d",
                "4f6dd9bf643d246c"
            ]
        ]
    },
    {
        "id": "4f6dd9bf643d246c",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 270",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 960,
        "wires": []
    },
    {
        "id": "b2b78364bfd3ded6",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Proximity-In",
        "query": "select * from PromixitySensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 530,
        "y": 1000,
        "wires": [
            [
                "d24db25dc29bbe1f"
            ]
        ]
    },
    {
        "id": "d24db25dc29bbe1f",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 271",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f68b3f92a0778091",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 900,
        "wires": [
            [
                "682699ebbd8b163d",
                "e57e97a7155eb716",
                "b2b78364bfd3ded6"
            ]
        ]
    },
    {
        "id": "52bcfe561517e17b",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "PressureSensor1",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/PressureSensor/pressure",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 1060,
        "wires": [
            [
                "933a24857522b109"
            ]
        ]
    },
    {
        "id": "933a24857522b109",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 272",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5761153def2606e6",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 97",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0,2000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1060,
        "wires": [
            [
                "52bcfe561517e17b"
            ]
        ]
    },
    {
        "id": "0232e784a6f21ffb",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 98",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1120,
        "wires": [
            [
                "b4d75bb80f8effd2"
            ]
        ]
    },
    {
        "id": "b4d75bb80f8effd2",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Pressure-out",
        "measurement": "PressureSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 930,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4e871662704abe22",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "PressureSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/PressureSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "0232e784a6f21ffb",
                "0b751911658acf67"
            ]
        ]
    },
    {
        "id": "0b751911658acf67",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 273",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1160,
        "wires": []
    },
    {
        "id": "761c8b2c60428fde",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Pressure-In",
        "query": "select * from PressureSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 530,
        "y": 1200,
        "wires": [
            [
                "4ec0db2adab83867"
            ]
        ]
    },
    {
        "id": "4ec0db2adab83867",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 274",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1200,
        "wires": []
    },
    {
        "id": "06ec12e00538f80c",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 1120,
        "wires": [
            [
                "5761153def2606e6",
                "4e871662704abe22",
                "761c8b2c60428fde"
            ]
        ]
    },
    {
        "id": "6a7f4ea242d71609",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "Accmeter1-x",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/AccelerometerSensor/x",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 1280,
        "wires": [
            [
                "9894bd3d49b92ef6"
            ]
        ]
    },
    {
        "id": "9894bd3d49b92ef6",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 275",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1280,
        "wires": []
    },
    {
        "id": "27d49e22b6619ada",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 99",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-10, 10).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1280,
        "wires": [
            [
                "6a7f4ea242d71609"
            ]
        ]
    },
    {
        "id": "92d397fb4616e7d4",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "Accmeter1-y",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/AccelerometerSensor/y",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 1340,
        "wires": [
            [
                "2de5a8bb71b560ad"
            ]
        ]
    },
    {
        "id": "2de5a8bb71b560ad",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 276",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1340,
        "wires": []
    },
    {
        "id": "ad5beb495e50874b",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 100",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-10, 10).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1340,
        "wires": [
            [
                "92d397fb4616e7d4"
            ]
        ]
    },
    {
        "id": "aa2b76ddc125c810",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "Accmeter1-z",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/AccelerometerSensor/z",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 1400,
        "wires": [
            [
                "52d5249c9ca7a82e"
            ]
        ]
    },
    {
        "id": "52d5249c9ca7a82e",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 277",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1400,
        "wires": []
    },
    {
        "id": "a3d9bdf0c0f340a5",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 101",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-10, 10).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1400,
        "wires": [
            [
                "aa2b76ddc125c810"
            ]
        ]
    },
    {
        "id": "54191138c41eccbb",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 1360,
        "wires": [
            [
                "27d49e22b6619ada",
                "ad5beb495e50874b",
                "a3d9bdf0c0f340a5",
                "922353b5f33466cc",
                "398b4c40e47df13d"
            ]
        ]
    },
    {
        "id": "adcfad089cb132e8",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 102",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1440,
        "wires": [
            [
                "9dc7ebb79fd91e65"
            ]
        ]
    },
    {
        "id": "9dc7ebb79fd91e65",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "accmeter-out",
        "measurement": "AccmeterSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 950,
        "y": 1440,
        "wires": []
    },
    {
        "id": "922353b5f33466cc",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "AccmeterSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/AccelerometerSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 1440,
        "wires": [
            [
                "adcfad089cb132e8",
                "5b3ba2d8bbd3cf97"
            ]
        ]
    },
    {
        "id": "5b3ba2d8bbd3cf97",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 278",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1480,
        "wires": []
    },
    {
        "id": "398b4c40e47df13d",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "accmeter-In",
        "query": "select * from AccmeterSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 550,
        "y": 1520,
        "wires": [
            [
                "de2fbd94ac921535"
            ]
        ]
    },
    {
        "id": "de2fbd94ac921535",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 279",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1520,
        "wires": []
    },
    {
        "id": "76bd1472827d254e",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "Gyroscope1-x",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/GyroscopeSensor/x",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 1600,
        "wires": [
            [
                "0eae1027772118ea"
            ]
        ]
    },
    {
        "id": "0eae1027772118ea",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 280",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1600,
        "wires": []
    },
    {
        "id": "a9b679da5932d734",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 103",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-10, 10).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1600,
        "wires": [
            [
                "76bd1472827d254e"
            ]
        ]
    },
    {
        "id": "3c65169d97642116",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "Gyroscope1-y",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/GyroscopeSensor/y",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 1640,
        "wires": [
            [
                "cdd8038aaf078354"
            ]
        ]
    },
    {
        "id": "cdd8038aaf078354",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 281",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1640,
        "wires": []
    },
    {
        "id": "96650e40bdc2b09b",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 104",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-10, 10).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1640,
        "wires": [
            [
                "3c65169d97642116"
            ]
        ]
    },
    {
        "id": "9abccf9a821ca740",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "Gyroscope1-z",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/GyroscopeSensor/z",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 1680,
        "wires": [
            [
                "76c38dcc2e77269b"
            ]
        ]
    },
    {
        "id": "76c38dcc2e77269b",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 282",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1680,
        "wires": []
    },
    {
        "id": "6c718e2f5dcdf110",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 105",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-10, 10).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1680,
        "wires": [
            [
                "9abccf9a821ca740"
            ]
        ]
    },
    {
        "id": "6941c24dd2fcd683",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 106",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1740,
        "wires": [
            [
                "98c2ebbf92389f27"
            ]
        ]
    },
    {
        "id": "98c2ebbf92389f27",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "gyroscope-out",
        "measurement": "GyroscopeSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 960,
        "y": 1740,
        "wires": []
    },
    {
        "id": "fb58fe9a0aa7f043",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "GyroscopeSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/GyroscopeSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 1740,
        "wires": [
            [
                "6941c24dd2fcd683",
                "125b25c1f8f4f844"
            ]
        ]
    },
    {
        "id": "125b25c1f8f4f844",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 283",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1780,
        "wires": []
    },
    {
        "id": "56895559533cf7c4",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "gyroscope-In",
        "query": "select * from GyroscopeSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 550,
        "y": 1820,
        "wires": [
            [
                "96371c6d78fd4247"
            ]
        ]
    },
    {
        "id": "96371c6d78fd4247",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 284",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1820,
        "wires": []
    },
    {
        "id": "ae35e4617585072e",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 1660,
        "wires": [
            [
                "a9b679da5932d734",
                "96650e40bdc2b09b",
                "6c718e2f5dcdf110",
                "fb58fe9a0aa7f043",
                "56895559533cf7c4"
            ]
        ]
    },
    {
        "id": "fafbfccc342ec2cb",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "Magmeter1-x",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/MagmeterSensor/x",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 1900,
        "wires": [
            [
                "436df03b7a90334c"
            ]
        ]
    },
    {
        "id": "436df03b7a90334c",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 285",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1900,
        "wires": []
    },
    {
        "id": "75ae4e8e70bccf31",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 107",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-100, 100).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1900,
        "wires": [
            [
                "fafbfccc342ec2cb"
            ]
        ]
    },
    {
        "id": "666bcc3d905f86b8",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "Magmeter1-y",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/MagmeterSensor/y",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 1940,
        "wires": [
            [
                "30018d608840fc50"
            ]
        ]
    },
    {
        "id": "30018d608840fc50",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 286",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1940,
        "wires": []
    },
    {
        "id": "ddeb5cd1b1a5b1df",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 108",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-100, 100).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1940,
        "wires": [
            [
                "666bcc3d905f86b8"
            ]
        ]
    },
    {
        "id": "514accc9c9ddbf10",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "Magmeter1-z",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/MagmeterSensor/z",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 1980,
        "wires": [
            [
                "5322df5c697ee392"
            ]
        ]
    },
    {
        "id": "5322df5c697ee392",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 287",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1980,
        "wires": []
    },
    {
        "id": "96c55b39e6f81c32",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 109",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-100, 100).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1980,
        "wires": [
            [
                "514accc9c9ddbf10"
            ]
        ]
    },
    {
        "id": "ca41146574ed8030",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 110",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2040,
        "wires": [
            [
                "1539c48394c6a182"
            ]
        ]
    },
    {
        "id": "1539c48394c6a182",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Magmeter-out",
        "measurement": "MagmeterSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 960,
        "y": 2040,
        "wires": []
    },
    {
        "id": "5ea9d1dbed61fee6",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "MagmeterSensor",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/MagmeterSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 2040,
        "wires": [
            [
                "ca41146574ed8030",
                "7e9e2f75a85a1aea"
            ]
        ]
    },
    {
        "id": "7e9e2f75a85a1aea",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 288",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 2080,
        "wires": []
    },
    {
        "id": "58412184b639a2e4",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "magmeter-In",
        "query": "select * from MagmeterSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 550,
        "y": 2120,
        "wires": [
            [
                "2a79b76cf3f14cdf"
            ]
        ]
    },
    {
        "id": "2a79b76cf3f14cdf",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 289",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 2120,
        "wires": []
    },
    {
        "id": "cb3321784e16ed46",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 1960,
        "wires": [
            [
                "75ae4e8e70bccf31",
                "ddeb5cd1b1a5b1df",
                "96c55b39e6f81c32",
                "5ea9d1dbed61fee6",
                "58412184b639a2e4"
            ]
        ]
    },
    {
        "id": "1fba6fc0609f6dbc",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "GPSSensor1-lat",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/GPSSensor/latitude",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 2200,
        "wires": [
            [
                "66bcbb57eaa674a3"
            ]
        ]
    },
    {
        "id": "66bcbb57eaa674a3",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 290",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2200,
        "wires": []
    },
    {
        "id": "58dbb7bb9a99f9cf",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 111",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-90, 90).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2200,
        "wires": [
            [
                "1fba6fc0609f6dbc"
            ]
        ]
    },
    {
        "id": "874c24ad4a26c17f",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "GPSSensor1-long",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/GPSSensor/longitude",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 2240,
        "wires": [
            [
                "a9cc48bd0ce9d632"
            ]
        ]
    },
    {
        "id": "a9cc48bd0ce9d632",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 291",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2240,
        "wires": []
    },
    {
        "id": "b3398e0032280a64",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 112",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-180, 180).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2240,
        "wires": [
            [
                "874c24ad4a26c17f"
            ]
        ]
    },
    {
        "id": "ab6befdb6c5b5c88",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "GPSSensor1-alt",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/GPSSensor/altitude",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2280,
        "wires": [
            [
                "d15faf31cfaf7364"
            ]
        ]
    },
    {
        "id": "d15faf31cfaf7364",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 292",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2280,
        "wires": []
    },
    {
        "id": "589a4a843ef7dc1b",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 113",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 10000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2280,
        "wires": [
            [
                "ab6befdb6c5b5c88"
            ]
        ]
    },
    {
        "id": "f2b0ae2b2cf73c96",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 114",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2340,
        "wires": [
            [
                "7a46c14048166af4"
            ]
        ]
    },
    {
        "id": "7a46c14048166af4",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "GPS-out",
        "measurement": "GPSSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 960,
        "y": 2340,
        "wires": []
    },
    {
        "id": "097afded323bd461",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "GPSSensor",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/GPSSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 2340,
        "wires": [
            [
                "f2b0ae2b2cf73c96",
                "014ce5172a82358f"
            ]
        ]
    },
    {
        "id": "014ce5172a82358f",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 293",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 2380,
        "wires": []
    },
    {
        "id": "a3c6a635d339b7fc",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "gps-In",
        "query": "select * from GPSSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 550,
        "y": 2420,
        "wires": [
            [
                "b3fcfc6cc1d2039b"
            ]
        ]
    },
    {
        "id": "b3fcfc6cc1d2039b",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 294",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2420,
        "wires": []
    },
    {
        "id": "94a96987412a7933",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 2240,
        "wires": [
            [
                "58dbb7bb9a99f9cf",
                "b3398e0032280a64",
                "589a4a843ef7dc1b",
                "097afded323bd461",
                "a3c6a635d339b7fc"
            ]
        ]
    },
    {
        "id": "493e4b59f4d250a1",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "IRSensor1-temp",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/IRSensor/temperature",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 2500,
        "wires": [
            [
                "978fd9500213ab90"
            ]
        ]
    },
    {
        "id": "978fd9500213ab90",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 295",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2500,
        "wires": []
    },
    {
        "id": "11e4da92a1f216b7",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 115",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(-50, 150).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2500,
        "wires": [
            [
                "493e4b59f4d250a1"
            ]
        ]
    },
    {
        "id": "8d8759afc0cd7975",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "IRSensor1-dist",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/IRSensor/distance",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 2540,
        "wires": [
            [
                "718a63c558517db8"
            ]
        ]
    },
    {
        "id": "718a63c558517db8",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 296",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2540,
        "wires": []
    },
    {
        "id": "bc69795e9541a505",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 116",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 500).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2540,
        "wires": [
            [
                "8d8759afc0cd7975"
            ]
        ]
    },
    {
        "id": "8efdf74f0bb682e2",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "IRSensor1-intrusion",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/IRSensor/intrusion",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 2580,
        "wires": [
            [
                "194940bda6df886a"
            ]
        ]
    },
    {
        "id": "194940bda6df886a",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 297",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 2580,
        "wires": []
    },
    {
        "id": "76ca7c032276f796",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 117",
        "func": "function getRandomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 1.0).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2580,
        "wires": [
            [
                "8efdf74f0bb682e2"
            ]
        ]
    },
    {
        "id": "a85475169325a256",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 118",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2640,
        "wires": [
            [
                "bbc05794d9656668"
            ]
        ]
    },
    {
        "id": "bbc05794d9656668",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "IR-out",
        "measurement": "IRSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 970,
        "y": 2640,
        "wires": []
    },
    {
        "id": "531a2a3c54febd44",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "IRSensor",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/IRSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 2640,
        "wires": [
            [
                "a85475169325a256",
                "6c4c7aa27e7af1d3"
            ]
        ]
    },
    {
        "id": "6c4c7aa27e7af1d3",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 298",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 2680,
        "wires": []
    },
    {
        "id": "92c809a06e2585b1",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "IR-In",
        "query": "select * from IRSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 570,
        "y": 2720,
        "wires": [
            [
                "a2b9d6be6dba6774"
            ]
        ]
    },
    {
        "id": "a2b9d6be6dba6774",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 299",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 2720,
        "wires": []
    },
    {
        "id": "df04f272866583a9",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 2620,
        "wires": [
            [
                "11e4da92a1f216b7",
                "bc69795e9541a505",
                "76ca7c032276f796",
                "531a2a3c54febd44",
                "92c809a06e2585b1"
            ]
        ]
    },
    {
        "id": "7daef65be4372549",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "UltrasonicSensor1",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/UltrasonicSensor/distance",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 2800,
        "wires": [
            [
                "abc7f83b940963b9"
            ]
        ]
    },
    {
        "id": "abc7f83b940963b9",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 300",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2800,
        "wires": []
    },
    {
        "id": "95912955246e1952",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 119",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 2000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2800,
        "wires": [
            [
                "7daef65be4372549"
            ]
        ]
    },
    {
        "id": "bd1c33b97f4c3aef",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 120",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2840,
        "wires": [
            [
                "43b12e3e066d558e"
            ]
        ]
    },
    {
        "id": "43b12e3e066d558e",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "ultrasonic-out",
        "measurement": "UltrasonicSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 980,
        "y": 2840,
        "wires": []
    },
    {
        "id": "eae09af3d58017db",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "UltrasonicSensor",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/UltrasonicSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 2840,
        "wires": [
            [
                "bd1c33b97f4c3aef",
                "176f770a147f35c9"
            ]
        ]
    },
    {
        "id": "176f770a147f35c9",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 301",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 2880,
        "wires": []
    },
    {
        "id": "edb00bda14db37f5",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "Ultrasonic-In",
        "query": "select * from UltrasonicSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 570,
        "y": 2920,
        "wires": [
            [
                "fc9fa38913de6e1f"
            ]
        ]
    },
    {
        "id": "fc9fa38913de6e1f",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 302",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2920,
        "wires": []
    },
    {
        "id": "29d55a4423b1171a",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 2860,
        "wires": [
            [
                "95912955246e1952",
                "eae09af3d58017db",
                "edb00bda14db37f5"
            ]
        ]
    },
    {
        "id": "97fe776b4317af13",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "WaterTankDevice1-level",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/WatertankdeviceSensor/level",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 2980,
        "wires": [
            [
                "9dea4294ea278cc0"
            ]
        ]
    },
    {
        "id": "9dea4294ea278cc0",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 303",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 2980,
        "wires": []
    },
    {
        "id": "e2f5572168b6f5b6",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 121",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 5000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2980,
        "wires": [
            [
                "97fe776b4317af13"
            ]
        ]
    },
    {
        "id": "84f215cc6ae03f3f",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "WaterTankDevice1-flowrate",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/WatertankdeviceSensor/flowrate",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 3020,
        "wires": [
            [
                "a48fda77804e1b76"
            ]
        ]
    },
    {
        "id": "a48fda77804e1b76",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 304",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 3020,
        "wires": []
    },
    {
        "id": "86dd5128c1fc9b51",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 122",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 200).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 3020,
        "wires": [
            [
                "84f215cc6ae03f3f"
            ]
        ]
    },
    {
        "id": "850117352b97e903",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 123",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 3080,
        "wires": [
            [
                "d7a568e6988d9ec8"
            ]
        ]
    },
    {
        "id": "d7a568e6988d9ec8",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "watertank-out",
        "measurement": "WatertankdeviceSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 940,
        "y": 3080,
        "wires": []
    },
    {
        "id": "f6accdbd77677ef7",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "WatertankdeviceSensor",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/WatertankdeviceSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 3100,
        "wires": [
            [
                "850117352b97e903",
                "c95d2a8ddbd1d0c7"
            ]
        ]
    },
    {
        "id": "c95d2a8ddbd1d0c7",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 305",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 3120,
        "wires": []
    },
    {
        "id": "40bab1d7d0419b21",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "watertank-In",
        "query": "select * from WatertankdeviceSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 530,
        "y": 3160,
        "wires": [
            [
                "7914dea50177d699"
            ]
        ]
    },
    {
        "id": "7914dea50177d699",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 306",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 3160,
        "wires": []
    },
    {
        "id": "1d86fe1e621898e0",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 3080,
        "wires": [
            [
                "e2f5572168b6f5b6",
                "86dd5128c1fc9b51",
                "f6accdbd77677ef7",
                "40bab1d7d0419b21"
            ]
        ]
    },
    {
        "id": "1faf1155325f6c5f",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 124",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 10000).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3240,
        "wires": [
            [
                "9d254d875cd6e7ed"
            ]
        ]
    },
    {
        "id": "9d254d875cd6e7ed",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "GasSensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/GasSensor/concentration",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 3240,
        "wires": [
            [
                "70c457451ad3454b"
            ]
        ]
    },
    {
        "id": "70c457451ad3454b",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 307",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 3240,
        "wires": []
    },
    {
        "id": "cead258284bcb7aa",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 125",
        "func": "function getRandomFloat(min, max) {\n return Math.random() * (max - min) + min;\n}\n\nmsg.payload = getRandomFloat(0, 200).toFixed(1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3280,
        "wires": [
            [
                "6ebaa61681e387f1"
            ]
        ]
    },
    {
        "id": "6ebaa61681e387f1",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "GasSensor1",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59986/api/v2/resource/GasSensor/gas",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 3280,
        "wires": [
            [
                "0769a6d1a9675795"
            ]
        ]
    },
    {
        "id": "0769a6d1a9675795",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 308",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 3280,
        "wires": []
    },
    {
        "id": "e9e91f7ef87f0a21",
        "type": "function",
        "z": "4212b7702b0d5adb",
        "name": "function 126",
        "func": "var output = [];\nvar objects = JSON.parse(msg.payload).readings;\nfor (var o in objects) {\n    var v = objects[o];\n    var ts = Math.floor(v.origin / 1000000);\n    var measurementjson1 = {\n        timestamp: new Date(ts).toISOString(),\n        parameter: v.resourceName,\n        data: v.value,\n        unit: v.units\n    };\n    var measurementjson2 = {\n        gateway: v.deviceName,\n        unique: v.deviceName + \" \" + v.resourceName,\n        location: \"Hyderabad\"\n    };\n    output.push([measurementjson1, measurementjson2]);\n\n}\nconsole.log(output);\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 3340,
        "wires": [
            [
                "7844bf955b3c16e0"
            ]
        ]
    },
    {
        "id": "7844bf955b3c16e0",
        "type": "influxdb out",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "GAS-out",
        "measurement": "GasSensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "Flowrate",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 910,
        "y": 3340,
        "wires": []
    },
    {
        "id": "06bd9aaf6f3aae23",
        "type": "http request",
        "z": "4212b7702b0d5adb",
        "name": "GasSensor-event",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:59880/api/v2/reading/device/name/GasSensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 3340,
        "wires": [
            [
                "e9e91f7ef87f0a21",
                "9b0552def7c56a6b"
            ]
        ]
    },
    {
        "id": "9b0552def7c56a6b",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 309",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 3380,
        "wires": []
    },
    {
        "id": "d32070e9d4bb06d5",
        "type": "influxdb in",
        "z": "4212b7702b0d5adb",
        "influxdb": "92d96ef258e85909",
        "name": "GAS-In",
        "query": "select * from GasSensor;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 540,
        "y": 3420,
        "wires": [
            [
                "2688231cd8454a72"
            ]
        ]
    },
    {
        "id": "2688231cd8454a72",
        "type": "debug",
        "z": "4212b7702b0d5adb",
        "name": "debug 310",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 3420,
        "wires": []
    },
    {
        "id": "dc09a56caccf9678",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 3340,
        "wires": [
            [
                "1faf1155325f6c5f",
                "cead258284bcb7aa",
                "06bd9aaf6f3aae23",
                "d32070e9d4bb06d5"
            ]
        ]
    },
    {
        "id": "98ae50671321a983",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "e2f5572168b6f5b6",
                "86dd5128c1fc9b51",
                "f6accdbd77677ef7",
                "40bab1d7d0419b21",
                "1faf1155325f6c5f",
                "cead258284bcb7aa",
                "06bd9aaf6f3aae23",
                "d32070e9d4bb06d5",
                "edb00bda14db37f5",
                "eae09af3d58017db",
                "95912955246e1952",
                "11e4da92a1f216b7",
                "bc69795e9541a505",
                "76ca7c032276f796",
                "531a2a3c54febd44",
                "92c809a06e2585b1",
                "58dbb7bb9a99f9cf",
                "b3398e0032280a64",
                "589a4a843ef7dc1b",
                "097afded323bd461",
                "a3c6a635d339b7fc",
                "75ae4e8e70bccf31",
                "ddeb5cd1b1a5b1df",
                "96c55b39e6f81c32",
                "5ea9d1dbed61fee6",
                "58412184b639a2e4",
                "a9b679da5932d734",
                "96650e40bdc2b09b",
                "6c718e2f5dcdf110",
                "fb58fe9a0aa7f043",
                "56895559533cf7c4",
                "27d49e22b6619ada",
                "ad5beb495e50874b",
                "a3d9bdf0c0f340a5",
                "922353b5f33466cc",
                "398b4c40e47df13d",
                "5761153def2606e6",
                "4e871662704abe22",
                "761c8b2c60428fde",
                "682699ebbd8b163d",
                "e57e97a7155eb716",
                "b2b78364bfd3ded6",
                "f04a8f2e15a960a2",
                "074b7483065052ce",
                "947192f47ce53fd0",
                "1fd6b669ae95fbfd",
                "7413e3e73d96044d",
                "7859c05f93635f43",
                "43304a7a1f4aa9f5",
                "d4ad23af1512fb12",
                "3253d8df2d570bf2",
                "905c29391f03354e",
                "e59f43a6b06859e5",
                "b00cd33127d26128"
            ]
        ]
    },
    {
        "id": "101fea9711ee9e65",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 100,
        "wires": [
            [
                "e59f43a6b06859e5"
            ]
        ]
    },
    {
        "id": "d2224d1f8ca79955",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "b00cd33127d26128"
            ]
        ]
    },
    {
        "id": "fc050c88d3443ec3",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 320,
        "wires": [
            [
                "d4ad23af1512fb12"
            ]
        ]
    },
    {
        "id": "cb4aef286e4b90a4",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 380,
        "wires": [
            [
                "3253d8df2d570bf2"
            ]
        ]
    },
    {
        "id": "7d2b73a6f09e2548",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 520,
        "wires": [
            [
                "7413e3e73d96044d"
            ]
        ]
    },
    {
        "id": "62f38297fc2a6615",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 580,
        "wires": [
            [
                "7859c05f93635f43"
            ]
        ]
    },
    {
        "id": "a23cb40a2d473596",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 740,
        "wires": [
            [
                "074b7483065052ce"
            ]
        ]
    },
    {
        "id": "4970ae79ce205d24",
        "type": "inject",
        "z": "4212b7702b0d5adb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 800,
        "wires": [
            [
                "947192f47ce53fd0"
            ]
        ]
    },
    {
        "id": "92d96ef258e85909",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "sensorsedgex",
        "name": "",
        "usetls": false,
        "tls": "d50d0c9f.31e858",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    }
]